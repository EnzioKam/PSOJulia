var documenterSearchIndex = {"docs":
[{"location":"functions.html#Functions-1","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions.html#Defining-new-functions-1","page":"Functions","title":"Defining new functions","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"To use objective functions other than the ones provided in this package, ensure that the new function takes in an argument of type Vector{Float64}, i.e. Array{Float64, 1}. The function should also return a single value of type Float64.","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"For example, if you were to add in a new function called objective, the function can be written as follows:","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"function objective(x::Vector{Float64})\n    return sum(x.^2)\nend","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Note that the new function should work on all sizes of Vector other than empty vectors unless otherwise stated. In this case, you should add in an assertion to ensure that the input will conform to the required size.","category":"page"},{"location":"functions.html#List-of-available-functions-1","page":"Functions","title":"List of available functions","text":"","category":"section"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"The function definitions and other information are taken with reference from Ab Wahab et. al[1] and Surjanovic and Bingham[2]. A total of 30 functions from the package are listed below.","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"[1]: Ab Wahab MN, Nefti-Meziani S, Atyabi A (2015) A Comprehensive Review of Swarm Optimization Algorithms. PLoS ONE 10(5): e0122827. https://doi.org/10.1371/journal.pone.0122827","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"[2]: Surjanovic, S. & Bingham, D. (2013). Virtual Library of Simulation Experiments: Test Functions and Datasets. Retrieved June 4, 2020, from http://www.sfu.ca/~ssurjano.","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"ackley(x::Vector{Float64})","category":"page"},{"location":"functions.html#PSOJulia.ackley-Tuple{Array{Float64,1}}","page":"Functions","title":"PSOJulia.ackley","text":"ackley(x)\n\nEvaluates the ackley function on the vector x and returns the value.\n\nf(x) = -a exp left(-b sqrtfrac1d sum_i=1^d x_i^2 right)\n- exp left(frac1d cos(cx_i) + a + exp(1) right)\n\nwhere a = 0 b = 02 c = 2pi.\n\nThe global minimum f(x) = 0 is attained at x = (0   0). The recommended bounds are -32 leq x_i leq 32.\n\nExamples\n\njulia> ackley([1.0; 2.0; 3.0; 4.0])\n8.434694444437465\n\n\n\n\n\n","category":"method"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"beale(x::Vector{Float64})","category":"page"},{"location":"functions.html#PSOJulia.beale-Tuple{Array{Float64,1}}","page":"Functions","title":"PSOJulia.beale","text":"beale(x)\n\nEvaluates the beale function on the vector x of length 2 and returns the value.\n\nf(x) = (15 - x_1 + x_1 x_2)^2 + (225 - x_1 + x_1 x_2^2)^2 + (2625 - x_1 + x_1 x_2^2)^2\n\nThe global minimum f(x) = 0 is attained at x = (3 05). The recommended bounds are -45 leq x_i leq 45.\n\nExamples\n\njulia> beale([1.0; 2.0])\n126.935\n\n\n\n\n\n","category":"method"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"bohachevsky1(x::Vector{Float64})","category":"page"},{"location":"functions.html#PSOJulia.bohachevsky1-Tuple{Array{Float64,1}}","page":"Functions","title":"PSOJulia.bohachevsky1","text":"bohachevsky1(x)\n\nEvaluates the bohachevsky1 function on the vector x and returns the value.\n\nf(x) = sum_i=1^d-1 x_i^2 + 2x_i+1^2 -03cos(3pi x_i)-04cos(4pi x_i+1)+07)\n\nThe global minimum f(x) = 0 is attained at x = (0   0). The recommended bounds are -100 leq x_i leq 100.\n\nExamples\n\njulia> bohachevsky1([1.5; 2.2; 3.6; 4.7])\n102.78901699437496\n\n\n\n\n\n","category":"method"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"bohachevsky2(x::Vector{Float64})","category":"page"},{"location":"functions.html#PSOJulia.bohachevsky2-Tuple{Array{Float64,1}}","page":"Functions","title":"PSOJulia.bohachevsky2","text":"bohachevsky2(x)\n\nEvaluates the bohachevsky1 function on the vector x and returns the value.\n\nf(x) = sum_i=1^d-1 x_i^2 + 2x_i+1^2 -03cos(3pi x_i) cos(4pi x_i+1)+03)\n\nThe global minimum f(x) = 0 is attained at x = (0   0). The recommended bounds are -100 leq x_i leq 100.\n\nExamples\n\njulia> bohachevsky2([1.5; 2.2; 3.6; 4.7])\n100.56229490168752\n\n\n\n\n\n","category":"method"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"bohachevsky3(x::Vector{Float64})","category":"page"},{"location":"functions.html#PSOJulia.bohachevsky3-Tuple{Array{Float64,1}}","page":"Functions","title":"PSOJulia.bohachevsky3","text":"bohachevsky3(x)\n\nEvaluates the bohachevsky1 function on the vector x and returns the value.\n\nf(x) = sum_i=1^d-1 x_i^2 + 2x_i+1^2 -03cos(3pi x_i + 4pi x_i+1)+03)\n\nThe global minimum f(x) = 0 is attained at x = (0   0). The recommended bounds are -100 leq x_i leq 100.\n\nExamples\n\njulia> bohachevsky3([1.5; 2.2; 3.6; 4.7])\n101.11363047737527\n\n\n\n\n\n","category":"method"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"sphere(x::Vector{Float64})","category":"page"},{"location":"functions.html#PSOJulia.sphere-Tuple{Array{Float64,1}}","page":"Functions","title":"PSOJulia.sphere","text":"sphere(x)\n\nEvaluates the sphere function on the vector x and returns the value.\n\nf(x) = sum_i=1^d x_i^2\n\nThe global minimum f(x) = 0 is attained at x = (0   0). The recommended bounds are -100 leq x_i leq 100.\n\nExamples\n\njulia> sphere([1.0; 2.0; 3.0; 4.0])\n30\n\n\n\n\n\n","category":"method"},{"location":"functions.html#","page":"Functions","title":"Functions","text":"sumsquare(x::Vector{Float64})","category":"page"},{"location":"functions.html#PSOJulia.sumsquare-Tuple{Array{Float64,1}}","page":"Functions","title":"PSOJulia.sumsquare","text":"sumsquare(x)\n\nEvaluates the sumsquare function on the vector x and returns the value.\n\nf(x) = sum_i=1^d ix_i^2\n\nThe global minimum f(x) = 0 is attained at x = (0   0). The recommended bounds are -512 leq x_i leq 512.\n\nExamples\n\njulia> sumsquare([1.0; 2.0; 3.0; 4.0])\n100\n\n\n\n\n\n","category":"method"},{"location":"algorithm.html#Algorithm-1","page":"Algorithm","title":"Algorithm","text":"","category":"section"},{"location":"algorithm.html#","page":"Algorithm","title":"Algorithm","text":"Pages = [\"algorithm.md\"]","category":"page"},{"location":"algorithm.html#","page":"Algorithm","title":"Algorithm","text":"sPSO(X_initial, V_initial, w, c1, c2, u1, u2, eta, sig, fobj, allN, up, lb)","category":"page"},{"location":"algorithm.html#PSOJulia.sPSO-NTuple{13,Any}","page":"Algorithm","title":"PSOJulia.sPSO","text":"sPSO(X_initial, V_initial, w, c1, c2, u1, u2, eta, sig, fobj, allN, up, lb)\n\nRuns the smoothed Particle Swarm Optimisation algorithm on the list of inputs. The function returns a vector of recorded global best value estimates, and a matrix of their corresponding positions.\n\n...\n\nArguments\n\nX_initial: matrix of initial starting particle positions\nV_initial: matrix of initial starting particle velocities\nw: the intertia weight parameter\nc1: the cognitive acceleration coefficient\nc2: the social acceleration coefficient\nu1: function for random variable generation for cognitive term\nu2: function for random variable generation for social term\neta: step size parameter\nsig: standard deviation parameter\nfobj: objective function to be optimised\nallN: list of iteration numbers to record results at\nup: vector of upper bounds for each dimension\nlb: vector of lower bounds for each dimension\n\n...\n\nExamples\n\nallN = [10, 50, 100, 200, 400, Int(1e3), Int(3e3), Int(1e4)]\nw = 1 - 0.729\nc1 = 1.5\nc2 = 1.5\nen = 32\nu1 = rand\nu2 = rand\neta = 1\nsig = 0\nrep = 100\ndim = 5\n\nfobj = sphere\nlb = fill(-100, dim)\nup = fill(100, dim)\nA = repeat(lb, 1, en)\nB = repeat(up, 1, en)\nX_initial = generate_random_matrix(A, B)\nV_initial = generate_random_matrix(-(B-A), B-A)\n\nvalues, positions = sPSO(X_initial, V_initial, w, c1, c2, u1, u2, eta, sig, fobj, allN, up, lb)\n\n\n\n\n\n","category":"method"},{"location":"algorithm.html#","page":"Algorithm","title":"Algorithm","text":"PSO(X_initial, V_initial, w, c1, c2, u1, u2, fobj, allN, up, lb)","category":"page"},{"location":"algorithm.html#PSOJulia.PSO-NTuple{11,Any}","page":"Algorithm","title":"PSOJulia.PSO","text":"PSO(X_initial, V_initial, w, c1, c2, u1, u2, fobj, allN, up, lb)\n\nWrapper function that calls sPSO with eta=1 and sig=0. See sPSO.\n\n\n\n\n\n","category":"method"},{"location":"utilities.html#Utilities-1","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities.html#","page":"Utilities","title":"Utilities","text":"Pages = [\"utilities.md\"]","category":"page"},{"location":"utilities.html#","page":"Utilities","title":"Utilities","text":"generate_random_matrix(A, B)","category":"page"},{"location":"utilities.html#PSOJulia.generate_random_matrix-Tuple{Any,Any}","page":"Utilities","title":"PSOJulia.generate_random_matrix","text":"generate_random_matrix(A, B)\n\nGenerates a matrix X of the same size as the input arguments A and B,  each element containing a uniform random variable where each entry  X_ij contains U sim (A_ij B_ij). Used in sPSO.\n\nExamples\n\nA = [1 2; 3 4];\nB = [5 6; 7 8];\njulia> generate_random_matrix(A, B)\n2Ã—2 Array{Float64,2}:\n 4.1516   2.27863\n 5.42611  6.95403\n\nC = [1 2 3; 4 5 6];\njulia> generate_random_matrix(B, C)\nERROR: AssertionError: Unequal matrix sizes\n\n\n\n\n\n","category":"method"},{"location":"index.html#Home-1","page":"Home","title":"Home","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Documention for the PSOJulia module.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"The package contains the code to run PSO, sPSO, and provides a sample list of functions that can be used as objective functions.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Pages = [\"algorithm.md\", \"utilities.md\", \"functions.md\"]","category":"page"}]
}
